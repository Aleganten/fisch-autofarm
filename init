Drawing.clear()

local completionlowest = 0
local completionhighest = 1
-- lowest is how low it can go
-- highest is how high it can go 
-- uses math.random()


-- dont change
local casted = false
local MouseService = findfirstchild(Game, "MouseService")
local screen = getscreendimensions()
local questbutton


local PlayerGui = game.Players.localPlayer:FindFirstChild("PlayerGui")
if PlayerGui then
    local TopBarStandard = PlayerGui:FindFirstChild("TopbarStandard")
    if TopBarStandard then
        local Holders = TopBarStandard:FindFirstChild("Holders")
        if Holders then 
            local Left = Holders:FindFirstChild("Left")
            if Left then 
                questbutton = Left:FindFirstChild("Quest")
            end
        end
    end
end

local calcX = 180
local calcY = 30
-- MODIFY THESE SO THE CIRCLE IS IN THE MIDDLE OF THE QUEST BUTTON ON THE X AXIS
-- AND MODIFY IT SO THAT ITS ON THE BOTTOM OF THE QUEST BUTTON ON THE Y AXIS
local showcase = Drawing.new("Circle")
showcase.Visible = true
showcase.Position = {calcX, calcY}
showcase.Color = {255, 255, 255}
showcase.Radius = 10
showcase.Thickness = 5


_G.auto = false
wait(2)
_G.auto = true

local function getbutton()
    local PlayerGui = game.Players.localPlayer:FindFirstChild("PlayerGui")
    if PlayerGui then
        local shakeui = PlayerGui:FindFirstChild("shakeui")
        if shakeui then
            local mainui = shakeui:FindFirstChild("safezone")
            if mainui then
                local button = mainui:FindFirstChild("button")
                return button
            end
        end
    end
    return nil
end

local function Power(character)
    local children = getchildren(character)
    for i = 1, #children do
        if getname(children[i]) == "power" then
            return children[i]
        end
    end
    return nil
end

local function PowerBar(power)
    local firstChild = getchildren(power)[1]
    return firstChild
end

local function Bar(powerbar)
    local children = getchildren(powerbar)
    for i = 1, #children do
        if getname(children[i]) == "bar" then
            return children[i]
        end
    end
    return nil
end

local function DoSomething(success, perfect_value)
    if success and perfect_value and perfect_value >= math.random(completionlowest, completionhighest) then
        mouse1release()
    end
end

local function Perfect_value_retrive(bar)
    if not bar then
        return false, nil
    end

    local success, perfect_value, error = pcall(function()
        return getmemoryvalue(bar, 0x300, "float")
    end)

    return success, perfect_value
end

local Text1 = Drawing.new("Text")
local Text2 = Drawing.new("Text")
local Screen = getscreendimensions()
Text1.Text = "Off | [LCtrl] To Enable"
Text1.Size = 14
Text1.Visible = true
Text1.Font = 2
Text1.Position = {0, Screen.y/2}
local function keycheck()
    local cached = tick()
    while true do
        local current = tick()
        for _, key in ipairs(getpressedkeys()) do
            if key == "LeftCtrl" and current - cached > 0.8 then
                _G.Toggle = not _G.Toggle
                cached = current
            end
            if _G.Toggle then
                Text1.Color = {0,255,0}
                Text2.Text = "Off | [LCtrl] To Enable"
            else
                Text1.Color = {255,0,0}
                Text1.Text = "On | [LCtrl] To Disable"
            end
            wait(0.1)
        end
        wait()
    end
end

spawn(keycheck)

while _G.auto == true do
    if not _G.Toggle then 
        wait()
        continue 
    end
    if _G.Toggle and not casted then
        local players = findfirstchild(Game, "Players")
        if not players then wait() continue end

        local localplayer = getlocalplayer()
        if not localplayer then wait() continue end

        local Character = getcharacter(localplayer)
        if not Character then wait() continue end

        local Tools = findfirstchildofclass(Character, "Tool")
        if not Tools or not string.match(getname(Tools), "Rod") then wait() continue end

        local RluaCharacter = game.Players.localPlayer.Character
        if not RluaCharacter or type(RluaCharacter) ~= "table" then wait() continue end

        local RLuaTool = RluaCharacter:FindFirstChildOfClass("Tool")
        if not RLuaTool or not string.match(RLuaTool.Name, "Rod") then wait() continue end

        local RLuaValues = RLuaTool:FindFirstChild("values")
        if not RLuaValues or type(RLuaValues) ~= "table" then wait() continue end

        local RluaCast = RLuaValues:FindFirstChild("casted")
        if not RluaCast or type(RluaCast) ~= "table" then wait() continue end

        casted = RluaCast.Value
        if casted == false then
            pressed = false
        end

        if casted ~= true then
            if not pressed then
                mousemoveabs(screen.x / 2 + math.random(1,2), screen.y / 2 + math.random(1,2))
                mouse1press()
                pressed = true
            end

            local humanoidRootPart = findfirstchild(Character, "HumanoidRootPart")
            if not humanoidRootPart then wait() continue end

            local power = Power(humanoidRootPart)
            if not power then wait() continue end

            local powerbar = PowerBar(power)
            if not powerbar then wait() mouse1release() print("typeshit") pressed = false continue end

            local bar = Bar(powerbar)
            if not bar then wait() continue end

            local success, perfect_value = Perfect_value_retrive(bar)
            DoSomething(success, perfect_value)
        end
        wait()
    end

    local button = getbutton()
    if _G.Toggle and casted and button then
        local mice = getmouseposition()
        local GettedX = button:GetMemoryValue(0x108, "float")
        local GettedY = button:GetMemoryValue(0x10c, "float")
        local Size = button:GetMemoryValue(0x110, "float")
        local ForX = GettedX + (Size / 2)
        local ForY = GettedY + (Size / 2)

        mousemoveabs(calcX + math.random(0,2), calcY + math.random(0,2))
        if math.abs(mice.x - calcX) <= 2 and math.abs(mice.y - calcY) <= 2 and getbutton() then
            if ForX > 50 and ForY > 50 then
                setmouselocation(MouseService, ForX + math.random(1,2), ForY + math.random(1,2))
                mouse1click()
            end
        end
    end

    if _G.Toggle and casted and not button then
        local players = findfirstchild(Game, "Players")
        if not players then wait() continue end

        local localplayer = getlocalplayer()
        if not localplayer then wait() continue end

        local Character = getcharacter(localplayer)
        if Character then
            local Tools = findfirstchildofclass(Character, "Tool")
            if Tools and string.match(getname(Tools), "Rod") then
                sigma = Tools
                if sigma then
                    local balloon = getmemoryvalue(sigma, 0x68, "qword")
                    local ptr = pointer_to_user_data(balloon)
                    local name = setmemoryvalue(ptr, 0x0, "string", "Developers Rod")
                end
            end
        end
    end

    casted = false
    wait()
end
